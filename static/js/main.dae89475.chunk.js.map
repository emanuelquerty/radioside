{"version":3,"sources":["public/default-station-favicon.jpg","components/sidenav/sidenav.jsx","components/playerContainer/playerContainer.jsx","components/recentStation/recentStation.jsx","components/recents/recents.jsx","components/country/country.jsx","components/countries/countries.jsx","components/language/language.jsx","components/languages/languages.jsx","components/station/station.jsx","components/stations/stations.jsx","components/pageTitle/pageTitle.jsx","App.jsx","serviceWorker.js","index.js"],"names":["module","exports","SideNav","props","handleClick","onNavLinkClick","classes","navIsClosed","className","onClick","to","href","target","PlayerContainer","this","stationName","countryOrLanguage","aStationIsPlaying","stationFavicon","src","onError","e","onerror","alt","length","substring","togglePlaying","Component","RecentStation","name","favicon","url","onPlay","defaultFavicon","Recents","state","handlePlay","station","onUpdatePageTitle","recents","window","localStorage","getItem","JSON","parse","map","key","Country","flagUrl","stationCount","Countries","countries","loaded","handleCountryClick","countryName","onGetCountryName","isCountry","a","fetch","res","json","getCountries","then","setState","slice","country","stationcount","type","color","height","width","Language","Languages","languages","handleLanguageClick","languageName","onGetLanguageName","getLanguages","lang","Station","selectedStation","player","currentTime","Stations","stations","queryString","getStations","stationsCleaned","PageTitle","pageTitle","location","pathname","getPageTitle","App","Audio","toggleNav","updatePageTitle","setCountryOrLanguage","info","saveStationToRecents","filter","recentStation","unshift","setItem","stringify","paused","ended","play","pause","playAudio","basename","process","htmlFor","id","path","exact","render","Boolean","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.dae89475.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/default-station-favicon.74871842.jpg\";","import React from \"react\";\nimport \"./sidenav.css\";\nimport VideoLibrary from \"@material-ui/icons/VideoLibrary\";\nimport Public from \"@material-ui/icons/Public\";\nimport PinDrop from \"@material-ui/icons/PinDrop\";\nimport GitHub from \"@material-ui/icons/GitHub\";\n\nimport { Link } from \"react-router-dom\";\n\nfunction SideNav(props) {\n  function handleClick() {\n    props.onNavLinkClick();\n  }\n\n  let classes = \"sidenav \";\n  classes += props.navIsClosed ? \"sidenav-close\" : \"sidenav-open\";\n  return (\n    <div className={classes}>\n      <h1 className=\"app-title\"> Radioside</h1>\n      <ul className=\"sidenav__list\">\n        <li className=\"sidenav__item\" onClick={handleClick}>\n          <Link to=\"/\">\n            <VideoLibrary className=\"icon\" />\n            Recently Played\n          </Link>\n        </li>\n        <li className=\"sidenav__item\" onClick={handleClick}>\n          <Link to=\"countries\">\n            <Public className=\"icon\" />\n            Countries\n          </Link>\n        </li>\n        <li className=\"sidenav__item\" onClick={handleClick}>\n          <Link to=\"languages\">\n            <PinDrop className=\"icon\" />\n            Languages\n          </Link>\n        </li>\n      </ul>\n\n      <div className=\"app-author-and-github-box\">\n        <div className=\"app-github\">\n          Connect with me\n          <a\n            className=\"github-link\"\n            href=\"https://github.com/emanuelquerty?tab=repositories\"\n            target=\"__blank\"\n          >\n            <GitHub className=\"app-github__icon\" />\n          </a>\n          <p className=\"developer-name\">\n            Created with &hearts; by Emanuel Inacio\n          </p>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default SideNav;\n","import React, { Component } from \"react\";\nimport \"./playerContainer.css\";\nimport SkipPrevious from \"@material-ui/icons/SkipPrevious\";\nimport SkipNext from \"@material-ui/icons/SkipNext\";\nimport PlayArrow from \"@material-ui/icons/PlayArrow\";\nimport Pause from \"@material-ui/icons/Pause\";\n\nclass PlayerContainer extends Component {\n  render() {\n    let {\n      stationName,\n      countryOrLanguage,\n      aStationIsPlaying,\n      stationFavicon,\n    } = this.props;\n\n    return (\n      <div className=\"player-container\">\n        <div className=\"player-container__inner-wrapper\">\n          <div className=\"inner-wrapper__favicon-container\">\n            <img\n              className=\"favicon-container__img\"\n              src={stationFavicon}\n              onError={(e) => {\n                e.target.onerror = null;\n                e.target.src = \"https://picsum.photos/100\";\n              }}\n              alt=\"station\"\n            />\n          </div>\n          <div className=\"inner-wrapper_station-info\">\n            <p className=\"inner-wrapper__station-name\">\n              {stationName.length > 22\n                ? stationName.substring(0, 22)\n                : stationName}\n            </p>\n            <p className=\"inner-wrapper__station-country\">\n              {countryOrLanguage}\n            </p>\n          </div>\n          <div className=\"inner-wrapper__player-control-btns\">\n            <SkipPrevious className=\"player-control-btns__skip-previous\" />\n            <div\n              onClick={() => this.props.togglePlaying()}\n              className=\"player-control-btns__play-arrow-wrapper\"\n            >\n              {aStationIsPlaying ? (\n                <Pause className=\"pause-arrow-wrapper__pause-arrow\" />\n              ) : (\n                <PlayArrow className=\"play-arrow-wrapper__play-arrow\" />\n              )}\n            </div>\n            <SkipNext className=\"player-control-btns__skip-next\" />\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default PlayerContainer;\n","import React from \"react\";\nimport \"./recentStation.css\";\nimport defaultFavicon from \"../../public/default-station-favicon.jpg\";\n\nfunction RecentStation(props) {\n  let { name, countryOrLanguage, favicon } = props;\n\n  function handleClick() {\n    let { name, countryOrLanguage, url, favicon } = props;\n\n    // Play this station if a different station is playing.\n    // toggle between play and pause if it is already playing or paused\n    props.onPlay({ name, countryOrLanguage, url, favicon });\n  }\n\n  return (\n    <div className=\"recent-station\" onClick={handleClick}>\n      <img\n        className=\"recent-station__favicon\"\n        src={favicon}\n        onError={(e) => {\n          e.target.onerror = null;\n          e.target.src = defaultFavicon;\n        }}\n        alt=\"station favicon\"\n      />\n      <div className=\"recent-station__station-info-wrapper\">\n        <p className=\"recent-station__name\">\n          {name.length > 18 ? `${name.substring(0, 18)}...` : name}\n        </p>\n        <p className=\"recent-station__country-or-language\">\n          {countryOrLanguage.length > 18\n            ? `${countryOrLanguage.substring(0, 18)}...`\n            : countryOrLanguage}\n        </p>\n      </div>\n    </div>\n  );\n}\n\nexport default RecentStation;\n","import React, { Component } from \"react\";\nimport \"./recents.css\";\nimport RecentStation from \"../recentStation/recentStation.jsx\";\n\nclass Recents extends Component {\n  state = {};\n\n  componentWillUnmount() {\n    this.props.onUpdatePageTitle();\n  }\n\n  handlePlay = (station) => {\n    this.props.onPlay(station);\n  };\n\n  render() {\n    let recents = [];\n    if (window.localStorage.getItem(\"recents\")) {\n      recents = JSON.parse(window.localStorage.getItem(\"recents\"));\n    }\n\n    return (\n      <div className=\"page recents\">\n        {recents.length !== 0 && (\n          <p className=\"recent-page-title\">Recently Played</p>\n        )}\n        <div className=\"recents-inner-wrapper\">\n          {recents.length === 0 ? (\n            <p className=\"recent-description--on-no-recent-stations\">\n              Opsss... You haven't played any station recently.\n            </p>\n          ) : (\n            recents.map((station) => {\n              return (\n                <RecentStation\n                  key={station.name}\n                  name={station.name}\n                  countryOrLanguage={station.countryOrLanguage}\n                  favicon={station.favicon}\n                  url={station.url}\n                  onPlay={this.handlePlay}\n                />\n              );\n            })\n          )}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Recents;\n","import React, { Component } from \"react\";\nimport \"./country.css\";\nimport Search from \"@material-ui/icons/Search\";\n\nclass Country extends Component {\n  state = {\n    flagUrl: \"https://picsum.photos/100\",\n  };\n  render() {\n    return (\n      <div className=\"country\">\n        <div className=\"country__flag\">\n          <img src={this.state.flagUrl} alt=\"station flag\" />\n        </div>\n        <div className=\"country__inner-wrapper\">\n          <div className=\"inner-wrapper__name\">{this.props.name}</div>\n          <div className=\"inner-wrapper__station-count\">{`${this.props.stationCount} stations found`}</div>\n        </div>\n        <div className=\"country__seach-icon-wrapper\">\n          <Search className=\"seach-icon-wrapper__icon\" />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Country;\n","import React, { Component } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport \"./countries.css\";\nimport Country from \"../country/country.jsx\";\nimport Loader from \"react-loader-spinner\";\n\nclass Countries extends Component {\n  state = {\n    countries: [],\n    loaded: false,\n  };\n\n  componentWillUnmount() {\n    this.props.onUpdatePageTitle();\n  }\n\n  // Get all countries with their station count\n  componentDidMount() {\n    let url = \"https://de1.api.radio-browser.info/json/countries\";\n\n    async function getCountries() {\n      let res = await fetch(url);\n      return res.json();\n    }\n\n    getCountries().then((res) => {\n      this.setState({ countries: res.slice(3), loaded: true });\n    });\n  }\n\n  handleCountryClick = (countryName) => {\n    let isCountry = true;\n    this.props.onGetCountryName({ name: countryName, isCountry });\n  };\n\n  render() {\n    return (\n      <div className=\"page countries\">\n        <p className=\"countries-page-title\">Browse Stations by Country</p>\n        <div className=\"countries-inner-wrapper\">\n          {this.state.loaded ? (\n            this.state.countries.map((country) => {\n              let { name, stationcount } = country;\n              return (\n                <Link\n                  className=\"country-link\"\n                  key={name}\n                  to=\"/stations-by-country\"\n                  onClick={() => {\n                    this.handleCountryClick(name);\n                  }}\n                >\n                  <Country\n                    name={\n                      name.length > 20 ? `${name.substring(0, 22)}...` : name\n                    }\n                    stationCount={stationcount}\n                  />\n                </Link>\n              );\n            })\n          ) : (\n            <Loader\n              className=\"loader\"\n              type=\"Audio\"\n              color=\"#c4c4c4\"\n              height={80}\n              width={80}\n            />\n          )}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Countries;\n","import React, { Component } from \"react\";\nimport \"./language.css\";\nimport Search from \"@material-ui/icons/Search\";\n\nclass Language extends Component {\n  state = {};\n  render() {\n    return (\n      <div className=\"language\">\n        <div className=\"language__inner-wrapper\">\n          <div className=\"inner-wrapper__name\">{this.props.name}</div>\n          <div className=\"inner-wrapper__station-count\">{`${this.props.stationCount} stations found`}</div>\n        </div>\n        <div className=\"language__seach-icon-wrapper\">\n          <Search className=\"seach-icon-wrapper__icon\" />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Language;\n","import React, { Component } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport \"./languages.css\";\nimport Language from \"../language/language.jsx\";\nimport Loader from \"react-loader-spinner\";\n\nclass Languages extends Component {\n  state = {\n    languages: [],\n    loaded: false,\n  };\n\n  componentWillUnmount() {\n    this.props.onUpdatePageTitle();\n  }\n\n  // Get all languages with their station count\n  componentDidMount() {\n    let url = \"https://de1.api.radio-browser.info/json/languages\";\n\n    async function getLanguages() {\n      let res = await fetch(url);\n      return res.json();\n    }\n\n    getLanguages().then((res) => {\n      this.setState({ languages: res.slice(3), loaded: true });\n    });\n  }\n\n  handleLanguageClick = (languageName) => {\n    let isCountry = false;\n    this.props.onGetLanguageName({ name: languageName, isCountry });\n  };\n\n  render() {\n    return (\n      <div className=\"page languages\">\n        <p className=\"languages-page-title\">Browse Stations by Language</p>\n        <div className=\"languages-inner-wrapper\">\n          {this.state.loaded ? (\n            this.state.languages.map((lang) => {\n              let { name, stationcount } = lang;\n\n              return (\n                <Link\n                  className=\"language-link\"\n                  key={name}\n                  to=\"/stations-by-language\"\n                  onClick={() => {\n                    this.handleLanguageClick(name);\n                  }}\n                >\n                  <Language\n                    name={\n                      name.length > 20 ? `${name.substring(0, 22)}...` : name\n                    }\n                    stationCount={stationcount}\n                  />\n                </Link>\n              );\n            })\n          ) : (\n            <Loader\n              className=\"loader\"\n              type=\"Audio\"\n              color=\"#c4c4c4\"\n              height={80}\n              width={80}\n            />\n          )}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Languages;\n","import React from \"react\";\nimport \"./station.css\";\nimport PlayArrow from \"@material-ui/icons/PlayArrow\";\nimport Pause from \"@material-ui/icons/Pause\";\nimport Loader from \"react-loader-spinner\";\n\nfunction Station(props) {\n  let {\n    stationName,\n    countryOrLanguage,\n    aStationIsPlaying,\n    selectedStation,\n    player,\n  } = props;\n\n  function handleClick() {\n    let { stationName, countryOrLanguage, url, favicon } = props;\n\n    // Play this station if a different station is playing.\n    // toggle between play and pause if it is already playing or paused\n    props.onPlay({ name: stationName, countryOrLanguage, url, favicon });\n  }\n\n  return (\n    <div className=\"station\" onClick={handleClick}>\n      <div className=\"station__flag\">\n        <img src={\"https://picsum.photos/100\"} alt=\"station flag\" />\n      </div>\n      <div className=\"station__inner-wrapper\">\n        <div className=\"inner-wrapper__name\">\n          {stationName.length > 22 ? stationName.substring(0, 22) : stationName}\n        </div>\n        <div className=\"inner-wrapper__countryOrLanguage\">\n          {countryOrLanguage}\n        </div>\n      </div>\n      <div className=\"station__play-icon-wrapper\">\n        {aStationIsPlaying && selectedStation === stationName ? (\n          <Pause className=\"pause-icon-wrapper__icon\" />\n        ) : selectedStation === stationName && player.currentTime === 0 ? (\n          <Loader\n            className=\"audio-loader\"\n            type=\"Puff\"\n            color=\"#c4c4c4\"\n            height={40}\n            width={40}\n          />\n        ) : (\n          <PlayArrow className=\"play-icon-wrapper__icon\" />\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default Station;\n","import React, { Component } from \"react\";\nimport \"./stations.css\";\nimport Station from \"../station/station.jsx\";\nimport Loader from \"react-loader-spinner\";\n\nclass Stations extends Component {\n  state = {\n    stations: [],\n    selectedStation: \"\",\n    loaded: false,\n  };\n\n  componentWillUnmount() {\n    this.props.onUpdatePageTitle();\n  }\n\n  componentDidMount() {\n    let { queryString, isCountry } = this.props;\n    let url;\n\n    // Construct the url to fetch stations\n    isCountry\n      ? (url = `https://de1.api.radio-browser.info/json/stations/bycountry/${queryString}`)\n      : (url = `https://de1.api.radio-browser.info/json/stations/bylanguage/${queryString}`);\n\n    // Fetch stations from the country or language given by queryString\n    async function getStations() {\n      let res = await fetch(url);\n      return res.json();\n    }\n\n    getStations().then((res) => {\n      let key = 0;\n      let stationsCleaned = res.map((station) => {\n        let { name, country, url, favicon } = station;\n        key += 1;\n        return { name, countryOrLanguage: country, url, key, favicon };\n      });\n\n      this.setState({ stations: stationsCleaned.slice(), loaded: true });\n    });\n\n    // // STREAMS\n    // let key = 0;\n    // oboe(url).node(\"!.*\", (station) => {\n    //   //   console.log(station);\n    //   let stations = JSON.parse(JSON.stringify(this.state.stations));\n    //   let countryOrLanguage;\n\n    //   isCountry\n    //     ? (countryOrLanguage = station.country)\n    //     : (countryOrLanguage = station.language);\n\n    //   let { name, url } = station;\n    //   stations.push({ name, countryOrLanguage, url, key });\n    //   this.setState({ stations });\n    //   key += 1;\n    // });\n  }\n\n  handlePlay = (station) => {\n    // Play this station if a different station is playing.\n    // Toggle between play and pause if it is already playing or paused\n    this.props.onPlay(station);\n    this.setState({ selectedStation: station.name });\n  };\n\n  render() {\n    return (\n      <div className=\"page stations\">\n        {this.state.loaded ? (\n          this.state.stations.map((station) => {\n            return (\n              <Station\n                key={station.key}\n                stationName={station.name}\n                countryOrLanguage={station.countryOrLanguage}\n                url={station.url}\n                favicon={station.favicon}\n                onPlay={this.handlePlay}\n                aStationIsPlaying={this.props.aStationIsPlaying}\n                selectedStation={this.state.selectedStation}\n                player={this.props.player}\n              />\n            );\n          })\n        ) : (\n          <Loader\n            className=\"loader\"\n            type=\"Audio\"\n            color=\"#c4c4c4\"\n            height={80}\n            width={80}\n          />\n        )}\n      </div>\n    );\n  }\n}\n\nexport default Stations;\n","import React from \"react\";\n\nfunction PageTitle(props) {\n  function getPageTitle() {\n    let location = window.location.pathname;\n    let pageTitle;\n    switch (location) {\n      case \"/radioside/\":\n        pageTitle = \"Recently Played\";\n        break;\n      case \"/radioside/countries\":\n        pageTitle = \"Browse Stations by Country\";\n        break;\n      case \"/radioside/languages\":\n        pageTitle = \"Browse Stations by Language\";\n        break;\n      case \"/radioside/favorites\":\n        pageTitle = \"Your Favorite Stations\";\n        break;\n      case \"/radioside/stations-by-country\":\n        pageTitle = `Radio stations from ${props.countryOrLanguage}`;\n        break;\n      case \"/radioside/stations-by-language\":\n        pageTitle = `Radio stations in ${props.countryOrLanguage}`;\n        break;\n\n      default:\n        break;\n    }\n\n    return pageTitle;\n  }\n\n  return <p>{getPageTitle()}</p>;\n}\n\nexport default PageTitle;\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport SideNav from \"./components/sidenav/sidenav.jsx\";\nimport PlayerContainer from \"./components/playerContainer/playerContainer.jsx\";\nimport Menu from \"@material-ui/icons/Menu\";\nimport Close from \"@material-ui/icons/Close\";\nimport Recents from \"./components/recents/recents.jsx\";\nimport Countries from \"./components/countries/countries.jsx\";\nimport Languages from \"./components/languages/languages.jsx\";\nimport Stations from \"./components/stations/stations.jsx\";\nimport PageTitle from \"./components/pageTitle/pageTitle.jsx\";\nimport \"react-loader-spinner/dist/loader/css/react-spinner-loader.css\";\n\n/*\n ********** Explanation of state properties **********************\n * navIsClosed: this property holds the state of the navbar -whether it is open or closed\n *\n * countryOrLanguage: This is useful for holding the language or country of the page to display\n * when the user clicks in a country/language from which to search stations ( see Stations component).\n * Another use of it is to display the country or language of a given station in the PlayerContainer component.\n * Finally, it is also  used in the getPageTitle method bellow.\n *\n * isCountry: tells the app if the search results was by country or language.\n * This is useful in the stations component for figuring out the query string\n * and other informations (see Stations component)\n *\n * player: this is the player that plays the audio in the handle play method of the App component\n *\n * aStationIsPlaying: this tells if there is a station playing. Useful in the PlayerContainer and Stations Component\n * for swiching between the pause and play icon\n *\n * StationName: this holds the station name that is displayed in the PlayerContainer Component\n *\n *****************************************************************/\nclass App extends Component {\n  constructor() {\n    super();\n\n    // Get initial page title. This is update everytime a component is unmounted\n    this.state.pageTitle = <PageTitle countryOrLanguage=\"Angola\" />;\n  }\n\n  state = {\n    navIsClosed: true,\n    countryOrLanguage: \"Angola\",\n    isCountry: true,\n    player: new Audio(),\n    aStationIsPlaying: false,\n    stationName: \"No Station Playing\",\n    stationFavicon: \"https://picsum.photos/100\",\n  };\n\n  /* If nav is open, close nav. If closed, open nav */\n  toggleNav = () => {\n    this.setState({ navIsClosed: !this.state.navIsClosed });\n  };\n\n  /* This method sets and updates the page title on mobile devices */\n  updatePageTitle = () => {\n    this.setState({\n      pageTitle: <PageTitle countryOrLanguage={this.state.countryOrLanguage} />,\n    });\n  };\n\n  /* This method tells the app whether a search result is by country or language\n  See Description above the App component for further information */\n  setCountryOrLanguage = (info) => {\n    this.setState({ countryOrLanguage: info.name, isCountry: info.isCountry });\n  };\n\n  /* This method saves a station that just started playing into a locaStorage\n  variable for recently played stations */\n  saveStationToRecents = (station) => {\n    let { name, countryOrLanguage, url, favicon } = station;\n    // window.localStorage.removeItem(\"recents\");\n    // return;\n\n    // Save the station in recents\n    if (window.localStorage.getItem(\"recents\")) {\n      let recents = JSON.parse(window.localStorage.getItem(\"recents\"));\n      let currentStation = recents.filter((station) => station.name === name);\n\n      // Check if this station already exists\n      if (currentStation.length === 0) {\n        let recentStation = { name, countryOrLanguage, url, favicon };\n        recents.unshift(recentStation);\n        window.localStorage.setItem(\"recents\", JSON.stringify(recents));\n      }\n    } else {\n      let recents = [];\n      let recentStation = { name, countryOrLanguage, url, favicon };\n      recents.unshift(recentStation);\n      window.localStorage.setItem(\"recents\", JSON.stringify(recents));\n    }\n  };\n\n  /* This is called from Stations Component as a function prop.\n  See Stations component bellow for quick reference */\n  handlePlay = (station) => {\n    let { url, name, countryOrLanguage, favicon } = station;\n    let { player } = this.state;\n\n    if (\n      player.paused &&\n      player.currentTime > 0 &&\n      player.src === url &&\n      !player.ended\n    ) {\n      // If there's a station that has been paused,\n      // and we click on it again, just resume the station\n      player.play();\n      this.setState({ aStationIsPlaying: true });\n      return;\n    } else if (!player.paused && player.src === url) {\n      // If a station is playing and we click on it or on the play btn\n      // pause the station\n      player.pause();\n      this.setState({ aStationIsPlaying: false });\n      return;\n    } else if (!player.paused) {\n      // If there is a station playing and we selected a different station,\n      // pause the currently-playing station and start the new selected station\n      player.pause();\n      this.setState({ aStationIsPlaying: false });\n    }\n\n    /* Play the station that has been selected */\n    this.playAudio(player, name, url, countryOrLanguage, favicon);\n  };\n\n  /* Play the station that has been selected */\n  playAudio = async (player, name, url, countryOrLanguage, favicon) => {\n    try {\n      // Set the url of the station to play\n      player.src = url;\n\n      // wait until station plays. This throws an error if station can't play\n      // for reasons like station url is corrupted, station unavailable etc\n      await player.play();\n\n      // Set aStationIsPlaying flag to true\n      if (!player.paused) {\n        this.setState({\n          aStationIsPlaying: true,\n          stationName: name,\n          countryOrLanguage,\n          stationFavicon: favicon,\n        });\n\n        // Save this station to recently-played-stations page\n        this.saveStationToRecents({ name, url, countryOrLanguage, favicon });\n      }\n    } catch (err) {\n      this.setState({ aStationIsPlaying: false });\n    }\n  };\n\n  /* This method controls the radio player by toggling between play and pause\n   * depending on user pressing the play or pause button\n   */\n  togglePlaying = () => {\n    if (this.state.stationName === \"No Station Playing\") return;\n\n    // toggle the current station. If playing, pause it. Resume, otherwise.\n    let { player, aStationIsPlaying } = this.state;\n    if (aStationIsPlaying) {\n      player.pause();\n    } else {\n      player.play();\n    }\n\n    this.setState({ aStationIsPlaying: !aStationIsPlaying });\n  };\n\n  render() {\n    let {\n      stationName,\n      countryOrLanguage,\n      aStationIsPlaying,\n      isCountry,\n      pageTitle,\n      stationFavicon,\n    } = this.state;\n\n    return (\n      <div className=\"app\">\n        <Router basename={process.env.PUBLIC_URL}>\n          <main className=\"container\">\n            <label className=\"container__label\" htmlFor=\"hamburger-checkbox\">\n              <div className=\"label__hamburger-circle\" onClick={this.toggleNav}>\n                {this.state.navIsClosed ? (\n                  <Menu className=\"hamburger-circle__menu\" />\n                ) : (\n                  <Close className=\"hamburger-circle__menu\" />\n                )}\n              </div>\n            </label>\n            <input type=\"checkbox\" id=\"hamburger-checkbox\" />\n\n            <SideNav\n              navIsClosed={this.state.navIsClosed}\n              onNavLinkClick={this.toggleNav}\n            />\n            <div className=\"page-description\">{pageTitle}</div>\n            <PlayerContainer\n              aStationIsPlaying={aStationIsPlaying}\n              stationName={stationName}\n              countryOrLanguage={countryOrLanguage}\n              stationFavicon={stationFavicon}\n              togglePlaying={this.togglePlaying}\n            />\n\n            <Switch>\n              <Route\n                path=\"/\"\n                exact\n                render={() => (\n                  <Recents\n                    onUpdatePageTitle={this.updatePageTitle}\n                    onPlay={this.handlePlay}\n                  />\n                )}\n              />\n              <Route\n                path=\"/countries\"\n                render={() => {\n                  return (\n                    <Countries\n                      onGetCountryName={this.setCountryOrLanguage}\n                      onUpdatePageTitle={this.updatePageTitle}\n                    />\n                  );\n                }}\n              />\n              <Route\n                path=\"/languages\"\n                render={() => {\n                  return (\n                    <Languages\n                      onGetLanguageName={this.setCountryOrLanguage}\n                      onUpdatePageTitle={this.updatePageTitle}\n                    />\n                  );\n                }}\n              />\n              <Route\n                path=\"/stations-by-country\"\n                render={() => {\n                  return (\n                    <Stations\n                      queryString={countryOrLanguage}\n                      isCountry={isCountry}\n                      onPlay={this.handlePlay}\n                      aStationIsPlaying={aStationIsPlaying}\n                      player={this.state.player}\n                      onUpdatePageTitle={this.updatePageTitle}\n                    />\n                  );\n                }}\n              />\n              <Route\n                path=\"/stations-by-language\"\n                render={() => {\n                  return (\n                    <Stations\n                      queryString={this.state.countryOrLanguage}\n                      isCountry={this.state.isCountry}\n                      onPlay={this.handlePlay}\n                      aStationIsPlaying={aStationIsPlaying}\n                      player={this.state.player}\n                      onUpdatePageTitle={this.updatePageTitle}\n                    />\n                  );\n                }}\n              />\n            </Switch>\n          </main>\n        </Router>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App.jsx\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}